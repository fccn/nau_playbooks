{% import '_docker_deploy_helper.j2' as helper with context %}
version: "3.8"

services:
{% for richie_site, richie_site_config in richie_sites.items() %}
  {{ richie_site }}_app:
    # We tag our images with the current commit sha1 in the CI to make them
    # unique and avoid collisions in parallel builds.
    image: {{ richie_site_config.app_image }}
    container_name: {{ richie_docker_deploy_compose_name }}_{{ richie_site }}_app
    restart: unless-stopped
    environment:
{% for env_var_name, env_var_value in richie_site_config.app_environment_variables.items() %}
      {{ env_var_name }}: "{{ env_var_value }}"
{% endfor %}
    deploy:
      resources:
        limits:
          # 300MB per worker
          memory: {{ richie_site_config.app_gunicorn_workers * 300 }}M
        reservations:
          memory: {{ richie_site_config.app_gunicorn_workers * 200 }}M
    # volumes:
      # Used to increase log verbosity of the gunicorn and to add a Gunicorn worker abort handler
      # - ./app.py:/usr/local/etc/gunicorn/app.py
    user: "{{ richie_site_config.app_docker_user | default('1000') }}"
    command: wait-for-it {{ richie_docker_deploy_redis_host }}:{{ richie_docker_deploy_redis_port }} -- wait-for-it {{ richie_docker_deploy_mysql_host }}:{{ richie_docker_deploy_mysql_port }} -- /bin/bash -c "python manage.py migrate && gunicorn --workers={{ richie_site_config.app_gunicorn_workers | default(1) }} -c /usr/local/etc/gunicorn/app.py nau.wsgi:application"
    healthcheck:
      # test: curl --silent --fail --resolve {{ richie_site_config.app_environment_variables.DJANGO_ALLOWED_HOSTS }}:8000:127.0.0.1 'http://{{ richie_site_config.app_environment_variables.DJANGO_ALLOWED_HOSTS }}:8000'
      test: ["CMD", "echo", "''", ">", "/dev/tcp/127.0.0.1/8000", "||", "exit", "1"]
      start_period: 30s
      interval: 60s
      timeout: 60s
      retries: 10
{{ helper.service_configs(service=richie_site+'_app') }}
{{ helper.service_secrets(service=richie_site+'_app') }}

{% if richie_site_config.deploy_job %}
  # Job container that migrates db and reindex
  {{ richie_site }}_app_job:
    # We tag our images with the current commit sha1 in the CI to make them
    # unique and avoid collisions in parallel builds.
    image: {{ richie_site_config.app_image }}
    container_name: {{ richie_docker_deploy_compose_name }}_{{ richie_site }}_app_job
    restart: on-failure
    # use an environment variables file so we can reuse them bellow
    environment:
{% for env_var_name, env_var_value in richie_site_config.app_environment_variables.items() %}
      {{ env_var_name }}: "{{ env_var_value }}"
{% endfor %}
    deploy:
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 500M
    user: "{{ richie_site_config.app_docker_user | default('1000') }}"
    # wait for elasticsearch and mysql proxied on load balancer HAProxy
    command: wait-for-it {{ richie_docker_deploy_redis_host }}:{{ richie_docker_deploy_redis_port }} -- wait-for-it {{ richie_docker_deploy_mysql_host }}:{{ richie_docker_deploy_mysql_port }} -- /bin/bash -c "python manage.py migrate && sleep 1m && python manage.py bootstrap_elasticsearch"
    # apt update && apt install -y vim
    # vim /usr/local/lib/python3.10/site-packages/richie/apps/search/__init__.py
    # add line: 
    # **getattr(settings, "RICHIE_ES_CLIENT_KWARGS", { 'timeout': 120 }),
    # python manage.py bootstrap_elasticsearch
{{ helper.service_configs(service=richie_site+'_app') }}
{{ helper.service_secrets(service=richie_site+'_app') }}

{% endif %}

  {{ richie_site }}_nginx:
    image: {{ richie_site_config.nginx_image }}
    container_name: {{ richie_docker_deploy_compose_name }}_{{ richie_site }}_nginx
    hostname: {{ inventory_hostname }}
    restart: unless-stopped
    ports:
      - target: 80
        published: {{ richie_site_config.nginx_http_ingress_port }}
        protocol: tcp
        mode: ingress
      - target: 443
        published: {{ richie_site_config.nginx_https_ingress_port }}
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 50M
    healthcheck:
      test: ["CMD", "echo", "''", ">", "/dev/tcp/127.0.0.1/80", "&&", "echo", "''", ">", "/dev/tcp/127.0.0.1/443", "||", "exit", "1"]
      start_period: 30s
      interval: 60s
      timeout: 60s
      retries: 10
{{ helper.service_configs(service=richie_site+'_nginx') }}
{{ helper.service_secrets(service=richie_site+'_nginx') }}
{% endfor %}

{{ helper.configs() }}
{{ helper.secrets() }}
