---
# No longer use the docker nginx upstream directly, but use the one build during the deployment.
openedx_nginx_image: "docker.io/{{ openedx_build_web_server_docker_repository }}/{{ openedx_build_web_server_docker_image }}:{{ openedx_build_web_server_docker_tag }}"
openedx_nginx_deploy: true

openedx_nginx_http_port: 80

# port to connect using ssl without http2
openedx_nginx_https_port: 8443

# port to connect using ssl with http2
# nginx will activate http2 for all pairs of <IP>:<port> site
# when 1 on its sites has http2 activated
# so we split normal on different ports the traffic of
# https http1.1 vs https http2
openedx_nginx_http2s_port: 443

# By default we don't activate http2
openedx_nginx_http2: false

openedx_nginx_docker_deploy_templates:
  # nginx.conf
  - src: templates/nginx/nginx.conf
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/nginx.conf"
    config_name: nginx_conf
    service: nginx
    docker_target: /etc/nginx/nginx.conf

  # maps, additional configuration for nginx
  - src: templates/nginx/sites/maps.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/maps"
    config_name: nginx_site_maps
    service: nginx
    docker_target: /etc/nginx/sites-enabled/maps

  # default lms site
  - src: templates/nginx/sites/lms.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/lms"
    config_name: nginx_site_lms
    service: nginx
    docker_target: /etc/nginx/sites-enabled/lms

  # studio site
  - src: templates/nginx/sites/cms.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/cms"
    config_name: nginx_site_cms
    service: nginx
    docker_target: /etc/nginx/sites-enabled/cms

  # forum site
  - src: templates/nginx/sites/forum.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/forum"
    config_name: nginx_site_forum
    service: nginx
    docker_target: /etc/nginx/sites-enabled/forum

  # discovery site
  - src: templates/nginx/sites/discovery.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/discovery"
    config_name: nginx_site_discovery
    service: nginx
    docker_target: /etc/nginx/sites-enabled/discovery

  # notes site
  - src: templates/nginx/sites/notes.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/notes"
    config_name: nginx_site_notes
    service: nginx
    docker_target: /etc/nginx/sites-enabled/notes

  # insights site
  - src: templates/nginx/sites/insights.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/insights"
    config_name: nginx_site_insights
    service: nginx
    docker_target: /etc/nginx/sites-enabled/insights

  # ecommerce site
  - src: templates/nginx/sites/ecommerce.j2
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/sites/ecommerce"
    config_name: nginx_site_ecommerce
    service: nginx
    docker_target: /etc/nginx/sites-enabled/ecommerce

openedx_nginx_docker_deploy_files:
  # wildcard ssl crt
  - src: "{{ openedx_nginx_wildcard_ssl_certificate }}"
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/ssl/wildcard_certificate.crt.pem"
    when: "{{ openedx_nginx_wildcard_ssl_certificate is defined }}"
  # wildcard ssl key
  - src: "{{ openedx_nginx_wildcard_ssl_certificate_key }}"
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/ssl/wildcard_certificate.key.pem"
    when: "{{ openedx_nginx_wildcard_ssl_certificate_key is defined }}"
  # ssl crt
  - src: "{{ openedx_nginx_ssl_certificate }}"
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/ssl/certificate.crt.pem"
    when: "{{ openedx_nginx_ssl_certificate is defined }}"
  # ssl key
  - src: "{{ openedx_nginx_ssl_certificate_key }}"
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/ssl/certificate.key.pem"
    when: "{{ openedx_nginx_ssl_certificate_key is defined }}"
  - dest: "{{ openedx_docker_deploy_base_folder }}/nginx/nginx.htpasswd"
    # don't copy the file because it is already there.
    docker_target: "{{ openedx_nginx_htpasswd_file }}"
    secret_name: nginx_htpasswd
    service: nginx
    when: "{{ openedx_nginx_basic_authentication_users is defined }}"

  # Override images, like default platform favicon on nginx level
  - src: files/nginx/favicon.ico
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/files/images/lms/favicon.ico"
    service: nginx
    config_name: nginx_lms_favicon
    docker_target: /openedx/staticfiles/images/favicon.ico
  - src: files/nginx/favicon.ico
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/files/images/cms/favicon.ico"
    service: nginx
    config_name: nginx_cms_favicon
    docker_target: /openedx/staticfiles/images/favicon.ico
  - src: files/nginx/logo_nau_short_w557.png
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/files/images/insights/logo_nau_short_w557.png"
    service: nginx
    config_name: nginx_insights_logo_nau
    docker_target: /openedx/insights/assets/images/openedx-logo-v2.png
  - src: files/nginx/favicon.ico
    dest: "{{ openedx_docker_deploy_base_folder }}/nginx/files/images/insights/favicon.ico"
    service: nginx
    config_name: nginx_insights_favicon
    docker_target: /openedx/insights/assets/images/favicon.ico

# folder inside nginx docker container where the certificates will be mounted.
openedx_nginx_certificates_docker_target_folder: /etc/ssl/certs

# openedx_nginx_basic_authentication_users: !!null
openedx_nginx_ssl_certificate_docker_target: "{{ openedx_nginx_certificates_docker_target_folder }}/certificate.crt.pem"
openedx_nginx_ssl_certificate_key_docker_target: "{{ openedx_nginx_certificates_docker_target_folder }}/certificate.key.pem"
openedx_nginx_wildcard_ssl_certificate_docker_target: "{{ openedx_nginx_certificates_docker_target_folder }}/wildcard_certificate.crt.pem"
openedx_nginx_wildcard_ssl_certificate_key_docker_target: "{{ openedx_nginx_certificates_docker_target_folder }}/wildcard_certificate.key.pem"
openedx_nginx_htpasswd_file: /etc/nginx/nginx.htpasswd

openedx_notes_nginx_ssl_certificate_docker_target: /etc/ssl/certs/notes.crt.pem
openedx_notes_nginx_ssl_certificate_key_docker_target: /etc/ssl/certs/notes.key.pem

# a default site
openedx_nginx_lms_servers:
  - server_name: _
    default_server: true
    ssl_certificate: "{{ openedx_nginx_ssl_certificate_docker_target }}"
    ssl_certificate_key: "{{ openedx_nginx_ssl_certificate_key_docker_target }}"
    http2: "{{ openedx_nginx_lms_http2 | default(openedx_nginx_http2) }}"

openedx_nginx_cms_servers:
  - server_name: "{{ EDXAPP_CMS_BASE }}"
    ssl_certificate: "{{ openedx_nginx_ssl_certificate_docker_target }}"
    ssl_certificate_key: "{{ openedx_nginx_ssl_certificate_key_docker_target }}"
    http2: "{{ openedx_nginx_cms_http2 | default(openedx_nginx_http2) }}"

openedx_nginx_admin_access_trusted_ip_cidrs: "{{ NGINX_TRUSTED_IP_CIDRS }}"

# from the old ansible configuration repository
COMMON_ENABLE_BASIC_AUTH: False
EDXAPP_LMS_ENABLE_BASIC_AUTH: "{{ COMMON_ENABLE_BASIC_AUTH }}"
NGINX_HSTS_MAX_AGE: 31536000
NGINX_P3P_MESSAGE: 'CP="Open edX does not have a P3P policy."'

# In NAU we ask robots to not index the LMS certificates,
# because they can have sensitive and private data that our learners could not want to 
# make searchable by the world.
openedx_nginx_lms_robot_rules:
  - agent: "*"
    disallow: /certificates/
  - agent: "*"
    allow: "*"
openedx_nginx_cms_robot_rules: []
openedx_nginx_forum_robot_rules: []
openedx_nginx_insights_robot_rules: []
openedx_nginx_notes_robot_rules: []
openedx_nginx_ecommerce_robot_rules:
  - agent: "*"
    disallow: "*"

openedx_nginx_certificates_folder: "{{ openedx_docker_deploy_base_folder }}/nginx/ssl"

# Root folder where the s3 certificates of Let's Encrypt are put.
openedx_nginx_s3_certificates_folder: "/letsencrypt_certificates"

# The list of s3 certificates (certificate and its key)
openedx_docker_deploy_s3_files: []
